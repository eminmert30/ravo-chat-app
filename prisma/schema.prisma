generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String            @id @default(cuid())
  name                   String?
  email                  String?           @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  lastSeen               DateTime          @default(now())
  isOnline               Boolean           @default(false)
  accounts               Account[]
  chats                  ChatParticipant[]
  friendsOf              Friend[]          @relation("FriendsOfUser")
  friends                Friend[]          @relation("UserFriends")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  messages               Message[]
  sessions               Session[]
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId], name: "senderId_receiverId")
}

model Chat {
  id           String            @id @default(cuid())
  type         String            @default("private")
  name         String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id       String   @id @default(cuid())
  userId   String
  chatId   String
  joinedAt DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  chatId    String
  createdAt DateTime @default(now())
  fileUrl   String?
  fileType  String?
  fileName  String?
  isAudio   Boolean  @default(false)
  isDeleted Boolean  @default(false)
  isRead    Boolean  @default(false)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
