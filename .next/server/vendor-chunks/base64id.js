/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/base64id";
exports.ids = ["vendor-chunks/base64id"];
exports.modules = {

/***/ "(rsc)/./node_modules/base64id/lib/base64id.js":
/*!***********************************************!*\
  !*** ./node_modules/base64id/lib/base64id.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*!\n * base64id v0.1.0\n */ /**\n * Module dependencies\n */ var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Constructor\n */ var Base64Id = function() {};\n/**\n * Get random bytes\n *\n * Uses a buffer if available, falls back to crypto.randomBytes\n */ Base64Id.prototype.getRandomBytes = function(bytes) {\n    var BUFFER_SIZE = 4096;\n    var self = this;\n    bytes = bytes || 12;\n    if (bytes > BUFFER_SIZE) {\n        return crypto.randomBytes(bytes);\n    }\n    var bytesInBuffer = parseInt(BUFFER_SIZE / bytes);\n    var threshold = parseInt(bytesInBuffer * 0.85);\n    if (!threshold) {\n        return crypto.randomBytes(bytes);\n    }\n    if (this.bytesBufferIndex == null) {\n        this.bytesBufferIndex = -1;\n    }\n    if (this.bytesBufferIndex == bytesInBuffer) {\n        this.bytesBuffer = null;\n        this.bytesBufferIndex = -1;\n    }\n    // No buffered bytes available or index above threshold\n    if (this.bytesBufferIndex == -1 || this.bytesBufferIndex > threshold) {\n        if (!this.isGeneratingBytes) {\n            this.isGeneratingBytes = true;\n            crypto.randomBytes(BUFFER_SIZE, function(err, bytes) {\n                self.bytesBuffer = bytes;\n                self.bytesBufferIndex = 0;\n                self.isGeneratingBytes = false;\n            });\n        }\n        // Fall back to sync call when no buffered bytes are available\n        if (this.bytesBufferIndex == -1) {\n            return crypto.randomBytes(bytes);\n        }\n    }\n    var result = this.bytesBuffer.slice(bytes * this.bytesBufferIndex, bytes * (this.bytesBufferIndex + 1));\n    this.bytesBufferIndex++;\n    return result;\n};\n/**\n * Generates a base64 id\n *\n * (Original version from socket.io <http://socket.io>)\n */ Base64Id.prototype.generateId = function() {\n    var rand = Buffer.alloc(15); // multiple of 3 for base64\n    if (!rand.writeInt32BE) {\n        return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString() + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();\n    }\n    this.sequenceNumber = this.sequenceNumber + 1 | 0;\n    rand.writeInt32BE(this.sequenceNumber, 11);\n    if (crypto.randomBytes) {\n        this.getRandomBytes(12).copy(rand);\n    } else {\n        // not secure for node 0.4\n        [\n            0,\n            4,\n            8\n        ].forEach(function(i) {\n            rand.writeInt32BE(Math.random() * Math.pow(2, 32) | 0, i);\n        });\n    }\n    return rand.toString(\"base64\").replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n};\n/**\n * Export\n */ exports = module.exports = new Base64Id();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmFzZTY0aWQvbGliL2Jhc2U2NGlkLmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7O0NBRUMsR0FFRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQjs7Q0FFQyxHQUVELElBQUlDLFdBQVcsWUFBYTtBQUU1Qjs7OztDQUlDLEdBRURBLFNBQVNDLFNBQVMsQ0FBQ0MsY0FBYyxHQUFHLFNBQVNDLEtBQUs7SUFFaEQsSUFBSUMsY0FBYztJQUNsQixJQUFJQyxPQUFPLElBQUk7SUFFZkYsUUFBUUEsU0FBUztJQUVqQixJQUFJQSxRQUFRQyxhQUFhO1FBQ3ZCLE9BQU9OLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJSSxnQkFBZ0JDLFNBQVNKLGNBQVlEO0lBQ3pDLElBQUlNLFlBQVlELFNBQVNELGdCQUFjO0lBRXZDLElBQUksQ0FBQ0UsV0FBVztRQUNkLE9BQU9YLE9BQU9RLFdBQVcsQ0FBQ0g7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ08sZ0JBQWdCLElBQUksTUFBTTtRQUNoQyxJQUFJLENBQUNBLGdCQUFnQixHQUFHLENBQUM7SUFDNUI7SUFFQSxJQUFJLElBQUksQ0FBQ0EsZ0JBQWdCLElBQUlILGVBQWU7UUFDMUMsSUFBSSxDQUFDSSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBRyxDQUFDO0lBQzNCO0lBRUEsdURBQXVEO0lBQ3ZELElBQUksSUFBSSxDQUFDQSxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDQSxnQkFBZ0IsR0FBR0QsV0FBVztRQUVwRSxJQUFJLENBQUMsSUFBSSxDQUFDRyxpQkFBaUIsRUFBRTtZQUMzQixJQUFJLENBQUNBLGlCQUFpQixHQUFHO1lBQ3pCZCxPQUFPUSxXQUFXLENBQUNGLGFBQWEsU0FBU1MsR0FBRyxFQUFFVixLQUFLO2dCQUNqREUsS0FBS00sV0FBVyxHQUFHUjtnQkFDbkJFLEtBQUtLLGdCQUFnQixHQUFHO2dCQUN4QkwsS0FBS08saUJBQWlCLEdBQUc7WUFDM0I7UUFDRjtRQUVBLDhEQUE4RDtRQUM5RCxJQUFJLElBQUksQ0FBQ0YsZ0JBQWdCLElBQUksQ0FBQyxHQUFHO1lBQy9CLE9BQU9aLE9BQU9RLFdBQVcsQ0FBQ0g7UUFDNUI7SUFDRjtJQUVBLElBQUlXLFNBQVMsSUFBSSxDQUFDSCxXQUFXLENBQUNJLEtBQUssQ0FBQ1osUUFBTSxJQUFJLENBQUNPLGdCQUFnQixFQUFFUCxRQUFPLEtBQUksQ0FBQ08sZ0JBQWdCLEdBQUM7SUFDOUYsSUFBSSxDQUFDQSxnQkFBZ0I7SUFFckIsT0FBT0k7QUFDVDtBQUVBOzs7O0NBSUMsR0FFRGQsU0FBU0MsU0FBUyxDQUFDZSxVQUFVLEdBQUc7SUFDOUIsSUFBSUMsT0FBT0MsT0FBT0MsS0FBSyxDQUFDLEtBQUssMkJBQTJCO0lBQ3hELElBQUksQ0FBQ0YsS0FBS0csWUFBWSxFQUFFO1FBQ3RCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLRixLQUFLRSxNQUFNLEtBQUtDLEtBQUtDLEdBQUcsS0FBSyxHQUFHQyxRQUFRLEtBQ3BFTCxLQUFLQyxHQUFHLENBQUNELEtBQUtFLE1BQU0sS0FBS0YsS0FBS0UsTUFBTSxLQUFLQyxLQUFLQyxHQUFHLEtBQUssR0FBR0MsUUFBUTtJQUN2RTtJQUNBLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUssQ0FBQ0EsY0FBYyxHQUFHLElBQUs7SUFDbERWLEtBQUtHLFlBQVksQ0FBQyxJQUFJLENBQUNPLGNBQWMsRUFBRTtJQUN2QyxJQUFJN0IsT0FBT1EsV0FBVyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0osY0FBYyxDQUFDLElBQUkwQixJQUFJLENBQUNYO0lBQy9CLE9BQU87UUFDTCwwQkFBMEI7UUFDMUI7WUFBQztZQUFHO1lBQUc7U0FBRSxDQUFDWSxPQUFPLENBQUMsU0FBU0MsQ0FBQztZQUMxQmIsS0FBS0csWUFBWSxDQUFDQyxLQUFLRSxNQUFNLEtBQUtGLEtBQUtVLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBR0Q7UUFDekQ7SUFDRjtJQUNBLE9BQU9iLEtBQUtTLFFBQVEsQ0FBQyxVQUFVTSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsT0FBTztBQUNwRTtBQUVBOztDQUVDLEdBRURDLFVBQVVDLE9BQU9ELE9BQU8sR0FBRyxJQUFJakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXZvY2hhdC1hcHAvLi9ub2RlX21vZHVsZXMvYmFzZTY0aWQvbGliL2Jhc2U2NGlkLmpzP2IzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBiYXNlNjRpZCB2MC4xLjBcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbi8qKlxuICogQ29uc3RydWN0b3JcbiAqL1xuXG52YXIgQmFzZTY0SWQgPSBmdW5jdGlvbigpIHsgfTtcblxuLyoqXG4gKiBHZXQgcmFuZG9tIGJ5dGVzXG4gKlxuICogVXNlcyBhIGJ1ZmZlciBpZiBhdmFpbGFibGUsIGZhbGxzIGJhY2sgdG8gY3J5cHRvLnJhbmRvbUJ5dGVzXG4gKi9cblxuQmFzZTY0SWQucHJvdG90eXBlLmdldFJhbmRvbUJ5dGVzID0gZnVuY3Rpb24oYnl0ZXMpIHtcblxuICB2YXIgQlVGRkVSX1NJWkUgPSA0MDk2XG4gIHZhciBzZWxmID0gdGhpczsgIFxuICBcbiAgYnl0ZXMgPSBieXRlcyB8fCAxMjtcblxuICBpZiAoYnl0ZXMgPiBCVUZGRVJfU0laRSkge1xuICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoYnl0ZXMpO1xuICB9XG4gIFxuICB2YXIgYnl0ZXNJbkJ1ZmZlciA9IHBhcnNlSW50KEJVRkZFUl9TSVpFL2J5dGVzKTtcbiAgdmFyIHRocmVzaG9sZCA9IHBhcnNlSW50KGJ5dGVzSW5CdWZmZXIqMC44NSk7XG5cbiAgaWYgKCF0aHJlc2hvbGQpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKGJ5dGVzKTtcbiAgfVxuXG4gIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gbnVsbCkge1xuICAgICB0aGlzLmJ5dGVzQnVmZmVySW5kZXggPSAtMTtcbiAgfVxuXG4gIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gYnl0ZXNJbkJ1ZmZlcikge1xuICAgIHRoaXMuYnl0ZXNCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA9IC0xO1xuICB9XG5cbiAgLy8gTm8gYnVmZmVyZWQgYnl0ZXMgYXZhaWxhYmxlIG9yIGluZGV4IGFib3ZlIHRocmVzaG9sZFxuICBpZiAodGhpcy5ieXRlc0J1ZmZlckluZGV4ID09IC0xIHx8IHRoaXMuYnl0ZXNCdWZmZXJJbmRleCA+IHRocmVzaG9sZCkge1xuICAgICBcbiAgICBpZiAoIXRoaXMuaXNHZW5lcmF0aW5nQnl0ZXMpIHtcbiAgICAgIHRoaXMuaXNHZW5lcmF0aW5nQnl0ZXMgPSB0cnVlO1xuICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKEJVRkZFUl9TSVpFLCBmdW5jdGlvbihlcnIsIGJ5dGVzKSB7XG4gICAgICAgIHNlbGYuYnl0ZXNCdWZmZXIgPSBieXRlcztcbiAgICAgICAgc2VsZi5ieXRlc0J1ZmZlckluZGV4ID0gMDtcbiAgICAgICAgc2VsZi5pc0dlbmVyYXRpbmdCeXRlcyA9IGZhbHNlO1xuICAgICAgfSk7IFxuICAgIH1cbiAgICBcbiAgICAvLyBGYWxsIGJhY2sgdG8gc3luYyBjYWxsIHdoZW4gbm8gYnVmZmVyZWQgYnl0ZXMgYXJlIGF2YWlsYWJsZVxuICAgIGlmICh0aGlzLmJ5dGVzQnVmZmVySW5kZXggPT0gLTEpIHtcbiAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoYnl0ZXMpO1xuICAgIH1cbiAgfVxuICBcbiAgdmFyIHJlc3VsdCA9IHRoaXMuYnl0ZXNCdWZmZXIuc2xpY2UoYnl0ZXMqdGhpcy5ieXRlc0J1ZmZlckluZGV4LCBieXRlcyoodGhpcy5ieXRlc0J1ZmZlckluZGV4KzEpKTsgXG4gIHRoaXMuYnl0ZXNCdWZmZXJJbmRleCsrOyBcbiAgXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgYmFzZTY0IGlkXG4gKlxuICogKE9yaWdpbmFsIHZlcnNpb24gZnJvbSBzb2NrZXQuaW8gPGh0dHA6Ly9zb2NrZXQuaW8+KVxuICovXG5cbkJhc2U2NElkLnByb3RvdHlwZS5nZW5lcmF0ZUlkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmFuZCA9IEJ1ZmZlci5hbGxvYygxNSk7IC8vIG11bHRpcGxlIG9mIDMgZm9yIGJhc2U2NFxuICBpZiAoIXJhbmQud3JpdGVJbnQzMkJFKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKE1hdGgucmFuZG9tKCkgKiBNYXRoLnJhbmRvbSgpICogRGF0ZS5ub3coKSB8IDApLnRvU3RyaW5nKClcbiAgICAgICsgTWF0aC5hYnMoTWF0aC5yYW5kb20oKSAqIE1hdGgucmFuZG9tKCkgKiBEYXRlLm5vdygpIHwgMCkudG9TdHJpbmcoKTtcbiAgfVxuICB0aGlzLnNlcXVlbmNlTnVtYmVyID0gKHRoaXMuc2VxdWVuY2VOdW1iZXIgKyAxKSB8IDA7XG4gIHJhbmQud3JpdGVJbnQzMkJFKHRoaXMuc2VxdWVuY2VOdW1iZXIsIDExKTtcbiAgaWYgKGNyeXB0by5yYW5kb21CeXRlcykge1xuICAgIHRoaXMuZ2V0UmFuZG9tQnl0ZXMoMTIpLmNvcHkocmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm90IHNlY3VyZSBmb3Igbm9kZSAwLjRcbiAgICBbMCwgNCwgOF0uZm9yRWFjaChmdW5jdGlvbihpKSB7XG4gICAgICByYW5kLndyaXRlSW50MzJCRShNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgMzIpIHwgMCwgaSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJhbmQudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoL1xcLy9nLCAnXycpLnJlcGxhY2UoL1xcKy9nLCAnLScpO1xufTtcblxuLyoqXG4gKiBFeHBvcnRcbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBuZXcgQmFzZTY0SWQoKTtcbiJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiQmFzZTY0SWQiLCJwcm90b3R5cGUiLCJnZXRSYW5kb21CeXRlcyIsImJ5dGVzIiwiQlVGRkVSX1NJWkUiLCJzZWxmIiwicmFuZG9tQnl0ZXMiLCJieXRlc0luQnVmZmVyIiwicGFyc2VJbnQiLCJ0aHJlc2hvbGQiLCJieXRlc0J1ZmZlckluZGV4IiwiYnl0ZXNCdWZmZXIiLCJpc0dlbmVyYXRpbmdCeXRlcyIsImVyciIsInJlc3VsdCIsInNsaWNlIiwiZ2VuZXJhdGVJZCIsInJhbmQiLCJCdWZmZXIiLCJhbGxvYyIsIndyaXRlSW50MzJCRSIsIk1hdGgiLCJhYnMiLCJyYW5kb20iLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJzZXF1ZW5jZU51bWJlciIsImNvcHkiLCJmb3JFYWNoIiwiaSIsInBvdyIsInJlcGxhY2UiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/base64id/lib/base64id.js\n");

/***/ })

};
;